Ohg connects your Garmin wearable to your openHAB smart home system (https://www.openhab.org), giving you convenient access to key devices and information.

Visit the Garmin Connect IQ Store to install the app:

https://apps.garmin.com/apps/93fd8044-1cf4-450c-b8aa-1c80a6730d1a

# Resources

If you encounter a bug, please report it in the app's GitHub repository:
https://github.com/TheNinth7/ohg/issues

For updates, feedback, and community discussions, visit the openHAB forum: 
https://community.openhab.org/t/integrating-openhab-and-garmin/155748/18

# Development Status

This app is in an EARLY STAGE OF DEVELOPMENT. Features are limited for now, but active work is ongoing. 

Current features:
- Display a single sitemap from your openHAB server
- View frames and switch elements
- See the current status of switches
- Control (toggle) switches via custom Webhook

Planned features:
- Support more sitemap element types
- Control elements via openHAB REST API
- Manage multiple openHAB servers and sitemaps

# Connectivity

Garmin watches rely on your smartphone to connect to the local network or the Internet. If you use a VPN solution like Tailscale on your phone to access openHAB, it will also work with the watch. However, due to limitations in the Garmin Connect IQ SDK, the openHAB HTTP interface is only accessible on iOS devices. Android users must use an HTTPS endpoint with a valid certificate. 

You can use [MyopenHAB] https://www.myopenhab.org to get authenticated and encrypted access to your local openHAB instance. 

# Configuration

Once installed, you'll find the following options in the app settings:

| Setting | Description |
|----------|------------|
| URL                 | Enter the URL in the format: https://host:port or http://host:port.<br>HTTP is only supported when your wearable is connected to an iOS device. Refer to the [Connectivity](#connectivity) section above for details.|
| Webhook Identifier | Without a Webhook, the app can only display the status of items, but not send any commands. To send commmands, you need to setup a [Custom Webhook](#custom-webhook).  
| Username            | Username for basic authentication, required if using a reverse proxy or similar setup to access evcc from the Internet. |
| Password            | Password for basic authentication. |

## myopenHAB

If you'd like to connect the app to your openHAB instance via myopenHAB.org, you first need to install the [openHAB Cloud Connector](https://www.openhab.org/addons/integrations/openhabcloud/) https://myopenhab.org/ and register at (myopenhab.org).

In the app you then set the URL to https://home.myopenhab.org and use your myopenhab.org username and password for basic authentication.

# Sitemap Features

To use the app, you need to create an openHAB sitemap describing the structure you'd like to see in the app. Check the [openHAB Sitemaps documentation](https://www.openhab.org/docs/ui/sitemaps.html) for details.

The following Sitemap features are relevant:

## Sitemap

The name of the sitemap ("garmin" in the xample below) needs to correspond to the Sitemap Name in the [Configuration](#configuration).

The label ("My Home") is displayed in the app.

```
sitemap garmin label="My Home" {
}
```

## Elements

Currently supported elements are:
- [Frame](https://www.openhab.org/docs/ui/sitemaps.html#element-type-frame)
- [Switch](https://www.openhab.org/docs/ui/sitemaps.html#element-type-switch), refering to [items](https://www.openhab.org/docs/configuration/items.html) of type Switch.

Here a sample configuration with frames and switches:

```
sitemap garmin label="MyHome" {
	Frame label="Outside" {
		Switch item=GarageDoors label="Garage Doors"
	}
	Frame label="Ground Floor" {
		Switch item=LightCouch label="Couch Light"
	}
	Frame label="First Floor" {
		Switch item=LightBedroom label="Bedroom Light"
		Switch item=StudyLight label="Study Light"
		Switch item=BathroomLight label="Bathroom Light"
	}
}
```
Item refers to the item name that shall be controlled, label is the text that will be displayed in the app.

# Custom Webhook

The current openHAB REST API for sending commands is not compatible with the Garmin SDK. This will be changed in a future openHAB release, see [here](https://github.com/openhab/openhab-core/pull/4760?notification_referrer_id=NT_kwDOBw0YhrUxNjA5ODEyNjc2ODoxMTgyOTg3NTg#issuecomment-2835061624) for details.

In the meantime, it is possible to setup a custom Webhook for sending commands. Follow these steps:

## 1. Install Webhook Binding

First, you need to install the [Webhook HTTP binding](https://community.openhab.org/t/webhook-http-binding/152184).

![](screenshots\1_Webhook_installation.png)

## 2. Create a Thing

Second, create a new Webhook Thing. 

![](screenshots\2_1_Thing_creation.png)

![](screenshots\2_1_Thing_creation.png)

You then need to enter the Code tab of the Thing to edit the YAML code for creating a trigger channel.

![](screenshots\2_3_Thing_code.png)

For the trigger channel, you enter a JEXL script that takes all data from the request and puts it into a JSON that is then passed on to the script that processes the trigger.

The full YAML configuration for the Thing looks like follows. 

Attention: You need to replace the UID with the UID of the Thing you created. 

```yaml
UID: webhook:Webhook:d1097152a4
label: Webhook
thingTypeUID: webhook:Webhook
configuration:
  expression: resp.status=200
channels:
  - id: lastCall
    channelTypeUID: webhook:lastCall-channel
    label: Last request
    description: Timestamp of the last request to the webhook.
    configuration: {}
  - id: trigger
    channelTypeUID: webhook:trigger-channel
    label: Trigger
    description: Trigger that fires for each incoming request.
    configuration:
      expression: >-
        {
          // This expression takes all data from the request and puts it into a JSON string
          var gson = new( "com.google.gson.Gson" );
          var jsonRoot = {:}; var jsonBody = {:};
          // If text/json are not present put returns an error, so we need to check first
          if( ! empty( req.body.text ) ) jsonBody.put( "text", req.body.text );
          if( ! empty( req.body.json ) ) jsonBody.put( "json", req.body.json );
          jsonRoot.put( "parameters", req.parameters );
          jsonRoot.put( "body", jsonBody );
          jsonRoot.put( "method", req.method );
          return gson.toJson( jsonRoot );
        }
```

You should then see two channels with your Thing:

![](screenshots\2_4_Thing_channels.png)

## 3. Create a JavaScript

As last step, you create a [Rule](https://www.openhab.org/docs/concepts/rules.html) that is triggered when the Webhook is called and calls a JavaScript, which issues a command to a specified item.

![](screenshots\3_1_Rule_overview.png)

![](screenshots\3_2_Rule_code.png)

Here is the full script:

```javascript
var request = JSON.parse( event.event );

//console.info( "Webhook TEST: " + event.event );
//console.info( "Webhook TEST: " + request["parameters"]["body"] );

// Multiple values could be submitted with the same name,
// we only take the first one.
var action = request["parameters"]["action"] ? request["parameters"]["action"][0] : null;
var itemName = request["parameters"]["itemName"] ? request["parameters"]["itemName"][0] : null;
var command = request["parameters"]["command"] ? request["parameters"]["command"][0] : null;

if( action == "sendCommand" )
  {
    if( itemName && command ) items.getItem( itemName ).sendCommand( command )
    else console.warn( "Webhook: sendCommand was called but itemName or command was missing (itemName='" + itemName + "', command='" + command + "')." );
  }
else if( action == "toggle" )
  {
    if( itemName )
      {
        var item = items.getItem( itemName );
        var state = item.state;
        
        if( state == "ON" ) item.sendCommand( "OFF" )
        else if( state == "OFF" ) item.sendCommand( "ON" )
        else console.warn( "Webhook: toggle was called for itemName='" + itemName + "', but state was '" + state + "'." );
      }
    else console.warn( "Webhook: toggle was called but itemName was missing (itemName='" + itemName + "')." );
  }
else
  console.warn( "Webhook: action is empty or invalid (action='" + action + "')." );
```

As you can see from the code, the script supports three parameters:

| Parameter | Description |
------------|-------------|
| action | Either "sendCommand" or "toogle". "sendCommand" sends a specific command, "toggle" switches between ON and OFF. |
| itemName | the name of the item the command should be sent to |
| command | the command to be sent, only need in conjunction with "sendCommand" |

## 4. Test and App Configuration

You can now test the Webhook, for example by:

```
https://yourserver:yourport/webhook/d1097152a4?action=toggle?itemName=LightBedroom
```

"d1097152a4" is the last part of the UID of your Webhook Thing. This string is also what you now need to set in the app's settings to enable the Webhook:

![](screenshots\4_App_settings.png)
